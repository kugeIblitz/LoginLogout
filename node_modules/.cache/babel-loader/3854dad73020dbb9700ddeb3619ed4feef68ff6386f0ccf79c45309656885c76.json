{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\React_Projects\\\\LoginLogout\\\\src\\\\Store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nexport function AuthContextProvider(props) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"LoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n  useEffect(() => {\n    const loginInfo = localStorage.getItem(\"LoggedIn\");\n    if (loginInfo === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const logoutHandler = () => {\n    localStorage.removeItem(\"LoggedIn\");\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","_s","setIsLoggedIn","loginHandler","email","password","localStorage","setItem","loginInfo","getItem","logoutHandler","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/React_Projects/LoginLogout/src/Store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogout: () => {},\r\n});\r\n\r\nexport function AuthContextProvider(props) {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(\"LoggedIn\", \"1\");\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loginInfo = localStorage.getItem(\"LoggedIn\");\r\n    if (loginInfo === \"1\") {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"LoggedIn\");\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAEA,CAAA,KAAM,CAAC;AACnB,CAAC,CAAC;AAEF,OAAO,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMY,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;IACrCL,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAGF,YAAY,CAACG,OAAO,CAAC,UAAU,CAAC;IAClD,IAAID,SAAS,KAAK,GAAG,EAAE;MACrBN,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IAC1BJ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;IACnCT,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAACiB,QAAQ;IACnBC,KAAK,EAAE;MAAEhB,UAAU,EAAEA,UAAU;MAAEC,QAAQ,EAAEY;IAAc,CAAE;IAAAI,QAAA,EAC1Dd,KAAK,CAACc;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B;AAACjB,EAAA,CA5BeF,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AA6BnC,eAAeJ,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}